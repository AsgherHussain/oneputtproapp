//
//  LineChartView.swift
//  OnePuttProApp
//
//  Created by PramodKumar on 29/11/23.
//

import SwiftUI
import Foundation
import Charts

struct LineView: View {
 

  @State private var frontstack :[StrokeEntry] = []
  @State private var backstack :[StrokeEntry] = []
    var body: some View {
      if #available (iOS 16.0,*)
      {
        
        VStack {
          Chart {
            ForEach(frontstack) { item in
              LineMark(
                x: .value("X", item.x),
                y: .value("y", item.y)
              ).foregroundStyle(.green)
              //  .interpolationMethod(.catmullRom)
                .lineStyle(StrokeStyle(lineWidth: 3))
                .foregroundStyle(by: .value("Value", "Front"))
            }
            
            
            ForEach(backstack) { item in
              LineMark(
                x: .value("X", item.x),
                y: .value("y", item.y)
              ).foregroundStyle(.red)
              // .interpolationMethod(.catmullRom)
                .lineStyle(StrokeStyle(lineWidth: 3))
                .foregroundStyle(by: .value("Value", "Back"))
            }
            
          }
          .frame(height: 300)
          .chartForegroundStyleScale([
            "Front": .green,
            "Back": .red,
          ])
          .chartXAxis {
            AxisMarks() { _ in
              
              AxisValueLabel()
              
            }
          }
          
          .padding(.leading, 10)
          .chartYAxis {
            AxisMarks(position: .leading) { _ in
              AxisValueLabel()
            }
            
          }
          .chartPlotStyle { plotArea in
            plotArea
              .background(.gray.opacity(0.05))
          }
          .padding(.trailing, 10)
          .chartLegend(position: .bottom,alignment : .center,spacing : 10)
          
        }.onAppear{
          fetchValues()
        }
      }
    }
  
  
  func fetchValues()
  {
      let  bestPuttData1 = [
          "front_stroke": "[[3.234,0,0,0],[3.247,-0.0005206771886890234,0.0001094745305422088,-0.0003376168241040385]]",
          "back_stroke": "[[3.561,-0.07030194146225416,0.0063522641566944454,0.01582963878431411],[3.57,-0.0701667655763366,0.006678086723009457,0.014955059375919727]]"
      ]
      
      let bestPuttData = [
     "front_stroke": "[[3.234,0,0,0],[3.247,-0.0005206771886890234,0.0001094745305422088,-0.0003376168241040385],[3.26,-0.0011488575980344072,0.0001094745305422088,-0.0005391715911221992],[3.273,-0.0021605045719430933,0.00018711874620880878,-0.0007515132355068059],[3.286,-0.0037854938983370983,0.0003656139672918022,-0.0009722649847061361],[3.298,-0.005909451468295105,0.0005896104812054467,-0.0011419998278911663],[3.312,-0.009388574658296133,0.00098887608100312,-0.0013309124097758097],[3.326,-0.013712381191692342,0.0015881782832818142,-0.001496260845839351],[3.338,-0.017726567940223852,0.0022568054091888124,-0.001587645949102122],[3.351,-0.02218777265906778,0.0030054223694471614,-0.0014440762052269093],[3.363,-0.02623344748442246,0.0035493002138452224,-0.0010319289037572703],[3.376,-0.030379257928782218,0.0038340076236821935,-0.0002037449538842582],[3.389,-0.0341660916910926,0.00374045971795484,0.0009919088183992682],[3.4,-0.037163878956331005,0.003421609713096639,0.0022518483432232023],[3.412,-0.04031090138772326,0.002882287644745242,0.003872470744702715],[3.426,-0.04410277144733611,0.0021682427616250164,0.005995790432795874],[3.439,-0.04785698127012513,0.001566235492139835,0.008085351876056263],[3.452,-0.0517684840011703,0.0011802250330689417,0.010135002104399061],[3.465,-0.055570341999965904,0.0012474883399056353,0.012038275922282007],[3.48,-0.05959998312200725,0.0018625947228446866,0.013955946839244922],[3.491,-0.06234158900880726,0.0024885699079258343,0.015166424510297781],[3.502,-0.06482495107814813,0.003173084354022052,0.016150734983973826],[3.512,-0.06674447227167192,0.003768384496111334,0.016825511888229422],[3.521,-0.06814131917655593,0.00429298204493447,0.01721164316894402],[3.534,-0.06946771089254426,0.005044483862851315,0.01727864323417111],[3.547,-0.07016586351321003,0.005744688992130315,0.016849516423037322]]",
     "back_stroke": "[[3.561,-0.07030194146225416,0.0063522641566944454,0.01582963878431411],[3.57,-0.0701667655763366,0.006678086723009457,0.014955059375919727],[3.578,-0.06986023940599483,0.006913858553911188,0.014087097143087136],[3.586,-0.06935056671948031,0.007101141691500284,0.013213344851936362],[3.595,-0.06848034307263016,0.007259481573155156,0.012411675927654962],[3.604,-0.06729381691025206,0.007307149264266872,0.011984914311152865],[3.613,-0.0658586940189663,0.007241949559193827,0.0120026874420392],[3.622,-0.06422775065919785,0.007155996197520263,0.012477371853788258],[3.634,-0.061804917755481054,0.007122273511853093,0.01383759243969835],[3.645,-0.05939257183357341,0.007233476426013897,0.015601884192163707],[3.656,-0.05684333838187723,0.007509710519570658,0.017704620080823325],[3.668,-0.05393788538460686,0.008080948637416431,0.020101127345774645],[3.679,-0.051371842228147765,0.008785093126129743,0.02217541602165761],[3.689,-0.04924911329388214,0.009586935862644058,0.023883645855857016],[3.702,-0.046937655657328305,0.010803207736643086,0.025796680104464245],[3.715,-0.044879362497143784,0.012055341616888957,0.027459954230193737],[3.725,-0.04321771355025473,0.013005476301830786,0.028626143478489102],[3.736,-0.04118251923124645,0.013926958395438638,0.02979558597587959],[3.751,-0.03801175339085171,0.014892675580357262,0.0313428667966976],[3.762,-0.03550829456674422,0.015579650638158409,0.03257213345645194],[3.774,-0.032476086201649025,0.01643964389119261,0.03406917144837737],[3.785,-0.029404475458277728,0.017323261924429817,0.035586659226336796],[3.796,-0.026041159472652998,0.0183178331645763,0.03723842484974881],[3.808,-0.02211573742677448,0.019355565387594798,0.03916579753895473],[3.819,-0.018447240868515218,0.020167246772632312,0.04105738172701891],[3.831,-0.014448091058563137,0.02080714173215676,0.04326222048627299],[3.842,-0.010791829799220477,0.02111203345222247,0.045380383625885375],[3.854,-0.0067577600598056255,0.021088262862938977,0.047764997319366974]]",
      ]
      
    
     
     
      for (key, value) in bestPuttData {
          if let data = value.data(using: .utf8) {
              do {
                  let strokeArray = try JSONDecoder().decode([[Double]].self, from: data)
                  
                  switch key {
                  case "front_stroke":
                      let frontStack = strokeArray.map {
                          StrokeEntry(x: $0[1], y: $0[2])
                      }
                      print(strokeArray.map({ $0[1] }))
                      print(strokeArray.map({ $0[2] }))
                      frontstack = frontStack
                     // print("dummy : \(frontstack)")
                     // strokeDataArray.append(StrokeData(frontStack: frontStack, backStack: []))
                  case "back_stroke":
                      let backStack = strokeArray.map { StrokeEntry(x: $0[1], y: $0[2]) }
                      backstack =  backStack
                      print("dummy : \(backstack)")
                    //  strokeDataArray[strokeDataArray.count - 1].backStack = backStack
                  default:
                      break
                  }
              } catch {
                  print("Error decoding JSON: \(error)")
              }
          }
      }

     
  }
}

#Preview {
  LineView()
}


struct StrokeEntry : Identifiable {
    let id = UUID()
    let x: Double
    let y: Double
    
    init(x: Double, y: Double) {
        self.x = x
        self.y = y
    }
}
